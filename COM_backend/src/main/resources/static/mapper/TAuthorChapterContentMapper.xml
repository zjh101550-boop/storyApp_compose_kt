<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.uos.comp6239backend.mapper.TAuthorChapterContentMapper">

  <!-- Update a story in the database -->
  <update id="updateAuthorStory" parameterType="com.uos.comp6239backend.tdata.entity.TStorys">
    UPDATE t_story
    SET
      story_name = #{story.storyName},
      story_description = #{story.storyDescription},
      story_trends = #{story.storyTrends},
      story_cover_url = #{story.storyCoverUrl},
      author_id = #{story.authorId},
      is_used = #{story.isUsed}
    WHERE story_id = #{story.storyId}
  </update>

<!--  &lt;!&ndash; Insert a new story-category relationship into the database &ndash;&gt;-->
<!--  <insert id="insertAuthorStoryCategory" parameterType="com.uos.comp6239backend.tdata.entity.TStoryCategory">-->
<!--    INSERT INTO t_story_category (story_id, category_id, is_used)-->
<!--    VALUES (#{storyCategory.storyId}, #{storyCategory.categoryId}, #{storyCategory.isUsed})-->
<!--  </insert>-->

<!--  &lt;!&ndash; Insert a new author-story relationship into the database &ndash;&gt;-->
<!--  <insert id="insertAuthorWithStory" parameterType="com.uos.comp6239backend.tdata.entity.TAuthorWithStory">-->
<!--    INSERT INTO t_author_story (author_id, story_id, is_used)-->
<!--    VALUES (#{authorWithStory.authorId}, #{authorWithStory.storyId}, #{authorWithStory.isUsed})-->
<!--  </insert>-->

<!--  <insert id="insertAuthorStoryCategory" parameterType="com.uos.comp6239backend.tdata.entity.TStoryCategory">-->
<!--    INSERT INTO t_story_category (story_id, category_id, is_used)-->
<!--    VALUES (#{storyCategory.storyId}, #{storyCategory.categoryId}, #{storyCategory.isUsed})-->
<!--      ON DUPLICATE KEY UPDATE-->
<!--                         is_used = VALUES(storyCategory.is_used)-->
<!--  </insert>-->

  <insert id="insertAuthorWithStory" parameterType="com.uos.comp6239backend.tdata.entity.TAuthorWithStory">
    INSERT IGNORE INTO t_author_story (author_id, story_id, is_used)
    VALUES (#{authorWithStory.authorId}, #{authorWithStory.storyId}, #{authorWithStory.isUsed})
  </insert>


  <insert id="insertAuthorStoryCategory">
    INSERT IGNORE INTO t_story_category (story_id, category_id, is_used)
    VALUES (#{storyCategory.storyId}, #{storyCategory.categoryId}, #{storyCategory.isUsed})
  </insert>


  <insert id="insertAuthorStory" parameterType="com.uos.comp6239backend.tdata.entity.TStorys" useGeneratedKeys="true" keyProperty="story.storyId">
    INSERT INTO t_story (
      story_id,
      story_name,
      story_description,
      story_trends,
      story_cover_url,
      author_id,
      is_used
    ) VALUES (
               #{story.storyId},
               #{story.storyName},
               #{story.storyDescription},
               #{story.storyTrends},
               #{story.storyCoverUrl},
               #{story.authorId},
               #{story.isUsed}
             )
      ON DUPLICATE KEY UPDATE
                         story_name = VALUES(story_name),
                         story_description = VALUES(story_description),
                         story_trends = VALUES(story_trends),
                         story_cover_url = VALUES(story_cover_url),
                         author_id = VALUES(author_id),
                         is_used = VALUES(is_used)
  </insert>






<!--  &lt;!&ndash;  updateChapter&ndash;&gt;-->
<!--  <update id="updateAuthorChapter">-->
<!--    UPDATE t_chapter-->
<!--    SET-->
<!--      chapter_title = #{chapter.chapterTitle},-->
<!--      chapter_number = #{chapter.chapterNumber},-->
<!--      story_id = #{chapter.storyId},-->
<!--      notes = #{chapter.notes},-->
<!--      music = #{chapter.music},-->
<!--      is_end = #{chapter.isEnd},-->
<!--      is_used = #{chapter.isUsed}-->
<!--    WHERE chapter_id = #{chapter.chapterId}-->
<!--  </update>-->

  <insert id="updateAuthorChapter" parameterType="com.uos.comp6239backend.tdata.entity.TChapter" useGeneratedKeys="true" keyProperty="chapter.chapterId">
    INSERT INTO t_chapter (
      chapter_id,
      chapter_title,
      chapter_number,
      story_id,
      notes,
      music,
      is_end,
      is_used
    ) VALUES (
               #{chapter.chapterId},
               #{chapter.chapterTitle},
               #{chapter.chapterNumber},
               #{chapter.storyId},
               #{chapter.notes},
               #{chapter.music},
               #{chapter.isEnd},
               #{chapter.isUsed}
             )
      ON DUPLICATE KEY UPDATE
                         chapter_title = VALUES(chapter_title),
                         chapter_number = VALUES(chapter_number),
                         story_id = VALUES(story_id),
                         notes = VALUES(notes),
                         music = VALUES(music),
                         is_end = VALUES(is_end),
                         is_used = VALUES(is_used)
  </insert>




  <!--  insert ChapterList-->
  <insert id="insertAuthorChapterList" parameterType="java.util.List">
    INSERT INTO t_chapter
    (chapter_id, chapter_title, chapter_number, story_id, notes, music, is_end, is_used)
    VALUES
    <foreach collection="chapterList" item="item" index="index" separator=",">
      (
      #{item.chapterId, jdbcType=INTEGER},
      #{item.chapterTitle, jdbcType=VARCHAR},
      #{item.chapterNumber, jdbcType=INTEGER},
      #{item.storyId, jdbcType=INTEGER},
      #{item.notes, jdbcType=VARCHAR},
      #{item.music, jdbcType=VARCHAR},
      #{item.isEnd, jdbcType=INTEGER},
      #{item.isUsed, jdbcType=INTEGER}
      )
    </foreach>
  </insert>

  <!--  delete optionList by chapterId-->
  <delete id="deleteAuthorOptionByChapterId">
    DELETE FROM t_option
    WHERE chapter_id = #{chapterId}
  </delete>

  <!--  delete contentList by chapterId-->
  <delete id="deleteAuthorContentByChapterId">
    DELETE FROM t_content
    WHERE chapter_id = #{chapterId}
  </delete>

  <!--  insert OptionList-->
  <insert id="insertAuthorOptionList">
    INSERT INTO t_option (option_name, chapter_id, option_description, next_chapter_id, is_used, `order`)
    VALUES
    <foreach collection="optionList" item="option" separator=",">
      (
      #{option.optionName},
      #{option.chapterId},
      #{option.optionDescription},
      #{option.nextChapterId},
      #{option.isUsed},
      #{option.order}
      )
    </foreach>
  </insert>

<!--  insert contentList-->
  <insert id="insertAuthorContentList">
    INSERT INTO t_content
    ( `chapter_id`, `order`, `content_type`, `content_data`, `is_used`, `content_description`, `content_title`, `music`)
    VALUES
    <foreach collection="contentList" item="content" index="index" separator=",">
      (
      #{content.chapterId, jdbcType=INTEGER},
      #{content.order, jdbcType=INTEGER},
      #{content.contentType, jdbcType=INTEGER},
      #{content.contentData, jdbcType=VARCHAR},
      #{content.isUsed, jdbcType=INTEGER},
      #{content.contentDescription, jdbcType=VARCHAR},
      #{content.contentTitle, jdbcType=VARCHAR},
      #{content.music, jdbcType=VARCHAR}
      )
    </foreach>
  </insert>








<!--  &lt;!&ndash;  根据作者ID拿全部StoryId &ndash;&gt;-->
<!--  <select id="tAuthorStorysByAuthorId"  resultType="java.lang.Integer">-->
<!--    select story_id from t_author_story where is_used=1 and author_id=#{authorId}-->
<!--  </select>-->

  <!--  根据作者ID拿全部StoryId -->
  <select id="tAuthorStorysByAuthorId"  resultType="java.lang.Integer">
    select story_id from t_story where author_id=#{authorId}
  </select>



  <!--  根据故事ID显示本故事的基本信息 -->
  <select id="tAuthorStoryByStoryId" resultType="com.uos.comp6239backend.tdata.entity.TAuthorStorys">
    select ts.* from t_story ts where story_id=#{storyId}
  </select>

  <!--  根据章节ID显示本章节的基本信息 -->
  <select id="tAuthorChapterByChapterId" resultType="com.uos.comp6239backend.tdata.entity.TAuthorChapter">
    select ts.* from t_chapter ts where is_used=1 and chapter_id=#{chpterId}
  </select>

<!--  根据故事ID显示本故事的所有章节 -->
  <select id="tAuthorChapterListByStoryId" resultType="com.uos.comp6239backend.tdata.entity.TAuthorChapter">
    select tc.* from t_chapter tc where is_used=1 and story_id=#{storyId} order by tc.chapter_number desc
  </select>

<!--  根据章节ID显示本章节的所有内容 -->
  <select id="tAuthorContentListByChapterId" resultType="com.uos.comp6239backend.tdata.entity.TContent">
    select tc.* from t_content tc where is_used=1 and chapter_id=#{chapterId} order by tc.order desc
  </select>

  <!--  根据章节ID显示本章节的所有选项 -->
  <select id="tAuthorOptionListByChapterId" resultType="com.uos.comp6239backend.tdata.entity.TOption">
    select topt.* from t_option topt where is_used=1 and chapter_id=#{chapterId} order by topt.order desc
  </select>


<!--  根据故事ID和章节名模糊查询章节 -->
  <select id="tAuthorChapterByStoryIdAndChapterTitle" resultType="com.uos.comp6239backend.tdata.entity.TAuthorChapter">
    SELECT tc.* from t_chapter tc
    <where>
      <if test="storyId != null and storyId != ''">
        and story_id = #{storyId}
      </if>
      <if test="chapterTitle != null and chapterTitle != ''">
        and tc.chapter_title like CONCAT('%',#{chapterTitle},'%')
      </if>
    </where>
    order by tc.chapter_number desc
  </select>
</mapper>
